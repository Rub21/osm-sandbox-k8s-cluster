apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig
metadata:
  name: ${CLUSTER_NAME}
  region: ${AWS_REGION}

nodeGroups:
- name: gpu-${NODEGROUP_TYPE}
  desiredCapacity: 0
  minSize: 0
  maxSize: 1
  ssh:
    allow: true
    publicKeyName: k8s-sam-${AWS_REGION}
  volumeSize: 100
  volumeType: gp2
  instanceType: ${FAMILY}
  availabilityZones: ["${AWS_AVAILABILITY_ZONE}"]
  labels:
    nodegroup_type: ${NODEGROUP_TYPE}
  preBootstrapCommands:
  - "sudo yum update -y"
  - "sudo yum install -y git"
  - "sudo yum install -y aws-cli"
  - "sudo ssh-keygen -b 2048 -t rsa -f /root/.ssh/id_rsa -q -N ''"
  - "sudo cat /root/.ssh/id_rsa.pub"
  - "sudo yum update openssl"
  - "sudo yum -y install python3 python3-pip"
  - "pip3 install cookiecutter"
  - "sudo yum -y upgrade openssl"
  - "pip3 install 'urllib3<2.0'"
  - "pip3 install awscli"
  tags:
    # EC2 tags required for cluster-autoscaler auto-discovery
    k8s.io/cluster-autoscaler/node-template/label/lifecycle: OnDemand
    k8s.io/cluster-autoscaler/node-template/label/aws.amazon.com/spot: "false"
    k8s.io/cluster-autoscaler/node-template/label/gpu-count: "0"
    k8s.io/cluster-autoscaler/${CLUSTER_NAME}: "owned"
    k8s.io/cluster-autoscaler/node-template/label/nodegroup_type: "${NODEGROUP_TYPE}"
  iam:
    attachPolicyARNs:
    - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
    - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
    - arn:aws:iam::aws:policy/AmazonS3FullAccess
    - arn:aws:iam::aws:policy/CloudWatchFullAccess
    - ${AWS_POLICY_ARN}
    withAddonPolicies:
      autoScaler: true
      cloudWatch: true
